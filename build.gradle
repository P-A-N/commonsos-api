apply plugin: 'idea'
apply plugin: 'java'

repositories {
  mavenCentral()
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
  main {
    java { srcDir "src" }
    resources { srcDirs "resources" }
  }
  test {
    java { srcDir "test" }
    resources { srcDirs "test" }
  }
}

dependencies {
  compile ('com.sparkjava:spark-core:2.7.1') {
    exclude group: 'org.slf4j'
  }
  
  compile 'com.sun.mail:javax.mail:1.6.2'
  compile 'com.google.inject:guice:4.2.0'
  compile 'com.google.code.gson:gson:2.8.2'
  compile 'com.google.firebase:firebase-admin:6.2.0'
  compile 'com.amazonaws:aws-java-sdk-s3:1.11.338'
  
  compile 'org.apache.commons:commons-lang3:3.8.1'
  compile 'org.apache.velocity:velocity:1.7'
  compile 'org.projectlombok:lombok:1.16.18'
  compile 'org.postgresql:postgresql:42.2.2'
  compile 'org.codehaus.janino:janino:3.0.6'
  compile 'org.hibernate:hibernate-core:5.2.16.Final'
  compile 'org.hibernate:hibernate-c3p0:5.2.16.Final'
  compile 'org.flywaydb:flyway-core:5.0.7'
  compile 'org.web3j:core:3.4.0'
  compile 'org.ehcache:ehcache:3.6.1'
  compile 'org.im4java:im4java:1.4.0'
  
  compile 'commons-validator:commons-validator:1.6'
  compile 'commons-fileupload:commons-fileupload:1.4'
  
  compile 'ch.qos.logback:logback-classic:1.2.3'


  testCompile 'org.junit.jupiter:junit-jupiter-engine:5.5.0-M1'
  testCompile 'org.junit.platform:junit-platform-launcher:1.5.0-M1'
  testCompile 'org.mockito:mockito-core:2.23.0'
  testCompile 'org.mockito:mockito-junit-jupiter:2.23.0'
  testCompile 'org.assertj:assertj-core:3.9.1'
  testCompile 'com.h2database:h2:1.4.197'
  testCompile 'com.ninja-squad:DbSetup:2.1.0'
  testCompile 'io.rest-assured:rest-assured:3.1.1'
  testCompile 'org.subethamail:subethasmtp:3.1.7'
  testCompile 'com.github.stefanbirkner:system-rules:1.19.0'
}

jar {
  archiveName "commonsos-api.jar"
  manifest {
    attributes 'Main-Class': 'commonsos.Server', 'Application-Version': "$System.env.GIT_REVISION", 'Class-Path': configurations.compile.collect {it.getName()}.join(' ')
  }
}

task copyCompileDependencies(type: Sync) {
  from configurations.compile
  into "build/libs"
}

task createAddCommunityScript() {
  new File("$projectDir/add_community.sh").text =
    """java -cp ${configurations.compile.collect {it.getName()}.join(':')}:commonsos-api.jar commonsos.tools.AddCommunity \$1"""
}

task bundle(type: Zip, dependsOn: [jar, copyCompileDependencies, createAddCommunityScript]) {
  archiveName "commonsos-api.zip"
  from new File(buildDir, "libs")
  from ('start.sh')
  from ('stop.sh')
  from ('add_community.sh')
  into "commonsos-api"
}
